{"version":3,"sources":["components/Footer/Footer.module.scss","components/LandDisplay/LandDisplay.module.scss","components/Modal/Modal.module.scss","components/ModifierBar/ModifierBar.module.scss","images/settings.svg","components/LandFilter/LandFilter.module.scss","components/DeckEntry/DeckEntry.module.scss","utils/LandUtils.js","utils/Hooks.js","components/DeckEntry/DeckEntry.jsx","components/LandDisplay/LandDisplay.jsx","components/LandFilter/LandFilter.jsx","components/Modal/Modal.jsx","components/ModifierBar/ModifierBar.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js","App.module.scss"],"names":["module","exports","main","innerContainer","contact","credits","options","header","list","link","select","optionTitle","optionSection","maxLands","helperText","container","land","image","modal","button","__webpack_require__","p","heading","removed","buttonContainer","input","plains","label","island","swamp","mountain","forest","tab","landCountLabel","deckSection","deckDisplay","deckContainer","title","arrow","getRandomisedLands","filteredLands","oldLands","arguments","length","undefined","Object","keys","landData","reduce","newLands","landType","possibleLands","filter","_includes","name","deck","oldPos","newPos","Math","floor","random","temp","shuffleArray","transformLandsInDeck","lands","userLang","numberOfLands","split","map","card","splitCard","_splitCard","slicedToArray","count","values","languageData","find","val","getLandTypeFromLanguage","remainingLandCount","remainingArtCount","isNaN","min","landIndex","cardArray","newLand","cardName","concat","landCount","ceil","push","join","translateLandName","language","_data$find","entries","_ref","useLocalStorage","key","initialValue","_useState","useState","item","localStorage","getItem","JSON","parse","_unused","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","DeckEntry","numLands","newDeckRef","createRef","userDeck","setUserDeck","react_default","a","createElement","className","styles","onChange","e","target","spellCheck","readOnly","ref","onClick","current","LandDisplay","setRandomLands","_land","tLandName","displayName","src","imageUrl","alt","LandFilter","setFilteredLands","closeModal","useEffect","originalOverflow","window","getComputedStyle","document","body","overflow","style","setTab","updateActiveTab","id","tabs","allTabs","currentLandData","filteredLandNames","activeLandCount","landName","react","cx","toLowerCase","type","checked","htmlFor","currentTabData","currentFilteredTab","filteredLandName","defineProperty","objectSpread","toConsumableArray","onLandClick","disabled","Modal","children","isOpen","createPortal","ModifierBar","openFilter","Footer","setUserLang","setNumLands","max","href","App","footerRef","_useLocalStorage","_useLocalStorage2","_useLocalStorage3","_useLocalStorage4","_useLocalStorage5","Plains","Island","Swamp","Mountain","Forest","_useLocalStorage6","randomLands","_useState3","_useState4","modalOpen","setModalOpen","getNewLands","Modal_Modal","LandFilter_LandFilter","app","settings","scrollTo","top","offsetTop","behavior","gear","landIcons","DeckEntry_DeckEntry","parseInt","LandDisplay_LandDisplay","ModifierBar_ModifierBar","Footer_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9589c32a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Footer_main__31qnr\",\"innerContainer\":\"Footer_innerContainer__EKTAa\",\"contact\":\"Footer_contact__1ivZL\",\"credits\":\"Footer_credits__23olC\",\"options\":\"Footer_options__314PN\",\"header\":\"Footer_header__2lGJE\",\"list\":\"Footer_list__VuPW6\",\"link\":\"Footer_link__TBK4j\",\"select\":\"Footer_select__YNmGM\",\"optionTitle\":\"Footer_optionTitle__3uU28\",\"optionSection\":\"Footer_optionSection__2tQwi\",\"maxLands\":\"Footer_maxLands__1DDzj\",\"helperText\":\"Footer_helperText__1GDXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandDisplay_container__1i9-9\",\"land\":\"LandDisplay_land__1TBgS\",\"image\":\"LandDisplay_image__1FMHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1rxme\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ModifierBar_button__3b9py\"};","module.exports = __webpack_public_path__ + \"static/media/settings.82414380.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandFilter_container__1EckY\",\"heading\":\"LandFilter_heading__2V-Q_\",\"land\":\"LandFilter_land__1Pcze\",\"removed\":\"LandFilter_removed__zcyRA\",\"image\":\"LandFilter_image__1n0fH\",\"button\":\"LandFilter_button__2Bqu4\",\"buttonContainer\":\"LandFilter_buttonContainer__6ogXn\",\"input\":\"LandFilter_input__2rAu_\",\"plains\":\"LandFilter_plains__TprsD\",\"label\":\"LandFilter_label__1MTNL\",\"island\":\"LandFilter_island__2HAN6\",\"swamp\":\"LandFilter_swamp__i0gBD\",\"mountain\":\"LandFilter_mountain__hRNAw\",\"forest\":\"LandFilter_forest__Idxdx\",\"tab\":\"LandFilter_tab__3fOse\",\"landCountLabel\":\"LandFilter_landCountLabel__LLU2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deckSection\":\"DeckEntry_deckSection__1MZ8J\",\"deckDisplay\":\"DeckEntry_deckDisplay__3UBvw\",\"deckContainer\":\"DeckEntry_deckContainer__1s2zQ\",\"title\":\"DeckEntry_title__3hO4s\",\"arrow\":\"DeckEntry_arrow__3l__n\"};","import languageData from '../data/languages.json'\r\nimport landData from '../data/lands.json'\r\nimport _includes from 'lodash/includes'\r\n\r\nconst shuffleArray = deck => {\r\n  let oldPos = deck.length\r\n  while (oldPos) {\r\n    const newPos = Math.floor(Math.random() * oldPos--)\r\n    const temp = deck[oldPos]\r\n    deck[oldPos] = deck[newPos]\r\n    deck[newPos] = temp\r\n  }\r\n  return deck\r\n}\r\n\r\nexport const getRandomisedLands = (filteredLands, land, oldLands = {}) => {\r\n  const landTypes = Object.keys(landData)\r\n  const randomisedLands = landTypes.reduce((newLands, landType) => {\r\n    const possibleLands = landData[landType].filter(land => {\r\n      return !_includes(filteredLands[landType], land.name)\r\n    })\r\n    if (land === 'all' || land === landType) {\r\n      newLands[landType] = shuffleArray(possibleLands)\r\n    } else {\r\n      newLands[landType] = oldLands[landType]\r\n    }\r\n    return newLands\r\n  }, {})\r\n\r\n  return randomisedLands\r\n}\r\n\r\nexport const transformLandsInDeck = (\r\n  deck,\r\n  lands,\r\n  userLang = 'en',\r\n  numberOfLands\r\n) => {\r\n  const deckArray = deck.split('\\n')\r\n  const newDeckArray = deckArray.map(card => {\r\n    const splitCard = card.split(' ')\r\n    if (splitCard.length === 4) {\r\n      const [count, name] = splitCard\r\n      // First check if their card is in their language\r\n      const foundName = Object.values(languageData[userLang]).find(\r\n        val => val === name\r\n      )\r\n      if (foundName !== undefined) {\r\n        const landType = getLandTypeFromLanguage(name, userLang)\r\n        const newLands = lands[landType]\r\n        let remainingLandCount = count\r\n        let remainingArtCount =\r\n          !isNaN(numberOfLands) && numberOfLands > 0\r\n            ? Math.min(newLands.length, numberOfLands)\r\n            : newLands.length\r\n        let landIndex = 0\r\n        const cardArray = []\r\n        while (remainingLandCount > 0) {\r\n          const newLand = newLands[landIndex++]\r\n          const cardName = `${name} ${newLand.name}`\r\n          const landCount = Math.ceil(remainingLandCount / remainingArtCount)\r\n          remainingLandCount -= landCount\r\n          remainingArtCount--\r\n          cardArray.push(`${landCount} ${cardName}`)\r\n        }\r\n\r\n        return cardArray.join('\\n')\r\n      }\r\n    }\r\n\r\n    return card\r\n  })\r\n\r\n  return newDeckArray.join('\\n')\r\n}\r\n\r\nexport const translateLandName = (name, language = 'en') => {\r\n  return languageData[language][name]\r\n}\r\n\r\nexport const getLandTypeFromLanguage = (name, language = 'en') => {\r\n  const data = Object.entries(languageData[language])\r\n  const [enName] = data.find(([, translated]) => translated === name)\r\n  return enName\r\n}\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    const item = localStorage.getItem(key)\r\n    if (item) {\r\n      try {\r\n        return JSON.parse(item)\r\n      } catch {\r\n        return item\r\n      }\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  const setValue = value => {\r\n    const valueToStore = value instanceof Function ? value(storedValue) : value\r\n    setStoredValue(valueToStore)\r\n    valueToStore instanceof Object\r\n      ? localStorage.setItem(key, JSON.stringify(valueToStore))\r\n      : localStorage.setItem(key, valueToStore)\r\n  }\r\n\r\n  return [storedValue, setValue]\r\n}\r\n\r\nexport const useLockBodyScroll = () => {\r\n  useEffect(() => {\r\n    const originalOverflow = window.getComputedStyle(document.body).overflow\r\n    document.body.style.overflow = 'hidden'\r\n\r\n    return () => (document.body.style.overflow = originalOverflow)\r\n  }, [])\r\n}\r\n","import React, { createRef, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { transformLandsInDeck } from '../../utils/LandUtils'\r\nimport styles from './DeckEntry.module.scss'\r\n\r\nexport const DeckEntry = ({ newLands, userLang, numLands }) => {\r\n  const newDeckRef = createRef()\r\n  const [userDeck, setUserDeck] = useState('')\r\n\r\n  return (\r\n    <div className={styles.deckSection}>\r\n      <div className={styles.deckContainer}>\r\n        <span className={styles.title}>Imported Deck</span>\r\n        <textarea\r\n          className={styles.deckDisplay}\r\n          value={userDeck}\r\n          onChange={e => setUserDeck(e.target.value)}\r\n          spellCheck=\"false\"\r\n        />\r\n      </div>\r\n      <span className={styles.arrow}>➡</span>\r\n      <div className={styles.deckContainer}>\r\n        <span className={styles.title}>Export to MTG Arena</span>\r\n        <textarea\r\n          className={styles.deckDisplay}\r\n          readOnly\r\n          ref={newDeckRef}\r\n          value={transformLandsInDeck(userDeck, newLands, userLang, numLands)}\r\n          onClick={() => newDeckRef.current.select()}\r\n          spellCheck=\"false\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDeckEntry.propTypes = {\r\n  newLands: PropTypes.shape().isRequired,\r\n  userLang: PropTypes.string.isRequired,\r\n  numLands: PropTypes.number.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { translateLandName } from '../../utils/LandUtils'\r\n\r\nimport styles from './LandDisplay.module.scss'\r\n\r\nexport const LandDisplay = ({ lands, setRandomLands, userLang }) => (\r\n  <div className={styles.container}>\r\n    {Object.entries(lands).map(land => {\r\n      const [landType, landArray] = land\r\n      // Only display the first of the shuffled array\r\n      const landData = landArray[0]\r\n      const tLandName = translateLandName(landType, userLang)\r\n      const displayName = `${tLandName} ${landData.name}`\r\n      return (\r\n        <div key={landType} className={styles.land}>\r\n          {displayName}\r\n          <img\r\n            className={styles.image}\r\n            src={landData.imageUrl}\r\n            alt={displayName}\r\n            onClick={() => setRandomLands(landType)}\r\n          />\r\n        </div>\r\n      )\r\n    })}\r\n  </div>\r\n)\r\n\r\nLandDisplay.propTypes = {\r\n  lands: PropTypes.shape().isRequired,\r\n  setRandomLands: PropTypes.func.isRequired,\r\n  userLang: PropTypes.string.isRequired,\r\n}\r\n","import React, { useState, Fragment } from 'react'\r\nimport _includes from 'lodash/includes'\r\nimport PropTypes from 'prop-types'\r\nimport cx from 'classnames'\r\n\r\nimport { useLockBodyScroll } from '../../utils/Hooks'\r\nimport { translateLandName } from '../../utils/LandUtils'\r\n\r\nimport styles from './LandFilter.module.scss'\r\n\r\nexport const LandFilter = ({\r\n  filteredLands,\r\n  setFilteredLands,\r\n  landData,\r\n  closeModal,\r\n  userLang,\r\n}) => {\r\n  useLockBodyScroll()\r\n  const [tab, setTab] = useState('Plains')\r\n  const updateActiveTab = e => setTab(e.target.id)\r\n\r\n  const allLands = Object.keys(landData)\r\n\r\n  const tabs = allLands.reduce((allTabs, land) => {\r\n    const currentLandData = landData[land]\r\n    const filteredLandNames = filteredLands[land]\r\n    const activeLandCount = currentLandData.length - filteredLandNames.length\r\n    const landName = translateLandName(land, userLang)\r\n\r\n    allTabs.push(\r\n      <Fragment key={`filter_${land}`}>\r\n        <input\r\n          className={cx(styles.input, styles[land.toLowerCase()])}\r\n          id={land}\r\n          type=\"radio\"\r\n          checked={tab === land}\r\n          onChange={updateActiveTab}\r\n        />\r\n        <label className={styles.label} htmlFor={land}>\r\n          <span>{landName}</span>\r\n          <span className={styles.landCountLabel}>({activeLandCount})</span>\r\n        </label>\r\n      </Fragment>\r\n    )\r\n    return allTabs\r\n  }, [])\r\n\r\n  const currentTabData = landData[tab]\r\n  const currentFilteredTab = filteredLands[tab]\r\n  const activeLandCount = currentTabData.length - currentFilteredTab.length\r\n  const filteredLandName = translateLandName(tab, userLang)\r\n\r\n  const onLandClick = name => {\r\n    const foundLand = currentFilteredTab.find(land => land === name)\r\n\r\n    if (foundLand === undefined) {\r\n      // Don't allow them to go below 1 active land\r\n      if (activeLandCount === 1) {\r\n        return\r\n      }\r\n\r\n      setFilteredLands({\r\n        ...filteredLands,\r\n        [tab]: [...currentFilteredTab, name],\r\n      })\r\n    } else {\r\n      setFilteredLands({\r\n        ...filteredLands,\r\n        [tab]: currentFilteredTab.filter(land => land !== name),\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.tab}>{tabs}</div>\r\n      <div className={styles.container}>\r\n        {currentTabData.map(land => {\r\n          const displayName = `${filteredLandName} ${land.name}`\r\n          return (\r\n            <div\r\n              key={land.name}\r\n              className={cx(styles.land, {\r\n                [styles.removed]: _includes(currentFilteredTab, land.name),\r\n              })}\r\n              onClick={() => onLandClick(land.name)}\r\n            >\r\n              {displayName}\r\n              <img\r\n                className={styles.image}\r\n                src={land.imageUrl}\r\n                alt={displayName}\r\n              />\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <div className={styles.buttonContainer}>\r\n        <button\r\n          className=\"main-button\"\r\n          disabled={activeLandCount < 1}\r\n          onClick={closeModal}\r\n        >\r\n          Save Filters\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nLandFilter.propTypes = {\r\n  filteredLands: PropTypes.shape().isRequired,\r\n  setFilteredLands: PropTypes.func.isRequired,\r\n  landData: PropTypes.shape().isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  userLang: PropTypes.string.isRequired,\r\n}\r\n","import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\n\r\nimport styles from './Modal.module.scss'\r\n\r\nexport const Modal = ({ children, isOpen }) =>\r\n  isOpen\r\n    ? createPortal(\r\n        <div className={styles.modal}>{children}</div>,\r\n        document.body\r\n      )\r\n    : null\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from './ModifierBar.module.scss'\r\n\r\nexport const ModifierBar = ({ openFilter, setRandomLands }) => (\r\n  <div className={styles.button}>\r\n    <button className=\"main-button\" onClick={openFilter}>\r\n      Filter\r\n    </button>\r\n\r\n    <button className=\"main-button\" onClick={() => setRandomLands()}>\r\n      Randomise All\r\n    </button>\r\n  </div>\r\n)\r\n\r\nModifierBar.propTypes = {\r\n  setRandomLands: PropTypes.func.isRequired,\r\n  openFilter: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from './Footer.module.scss'\r\n\r\nexport const Footer = ({ userLang, setUserLang, numLands, setNumLands }) => (\r\n  <div className={styles.main}>\r\n    <div className={styles.innerContainer}>\r\n      <div className={styles.options}>\r\n        <h5 className={styles.header}>Options</h5>\r\n        <div className={styles.optionSection}>\r\n          <span className={styles.optionTitle}>Language</span>\r\n          <select\r\n            className={styles.select}\r\n            value={userLang}\r\n            onChange={e => setUserLang(e.target.value)}\r\n          >\r\n            <option value=\"en\">English</option>\r\n            <option value=\"es\">Spanish</option>\r\n            <option value=\"fr\">French</option>\r\n            <option value=\"de\">German</option>\r\n            <option value=\"it\">Italian</option>\r\n            <option value=\"pt\">Portuguese</option>\r\n            <option value=\"ja\">Japanese</option>\r\n            <option value=\"ru\">Russian</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <span className={styles.optionTitle}>Convert to</span>\r\n          <input\r\n            className={styles.maxLands}\r\n            value={numLands}\r\n            type=\"number\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            onChange={e => setNumLands(e.target.value)}\r\n          />\r\n          <span className={styles.optionTitle}> different land art(s)</span>\r\n          <div className={styles.helperText}>\r\n            {`This setting will attempt to convert one land to X land arts.`}\r\n            <br />\r\n            {`0 = As many land arts as possible, 1 = one land art (default), 2 = two land arts etc.`}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={styles.credits}>\r\n        <h5 className={styles.header}>Credits</h5>\r\n        <ul className={styles.list}>\r\n          <li>Landcycler created by Sylencia</li>\r\n          <li>\r\n            {'Land images provided by '}\r\n            <a className={styles.link} href=\"https://scryfall.com/\">\r\n              Scryfall\r\n            </a>\r\n          </li>\r\n          <li>\r\n            {'Mana icons provided by '}\r\n            <a\r\n              className={styles.link}\r\n              href=\"https://andrewgioia.github.io/Mana/\"\r\n            >\r\n              Andrew Gioia\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className={styles.contact}>\r\n        <h5 className={styles.header}>Contact me</h5>\r\n        <ul className={styles.list}>\r\n          <li>\r\n            <a className={styles.link} href=\"https://www.reddit.com/u/Sylencia\">\r\n              Reddit\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a className={styles.link} href=\"https://github.com/Sylencia\">\r\n              Github\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nFooter.propTypes = {\r\n  userLang: PropTypes.string.isRequired,\r\n  setUserLang: PropTypes.func.isRequired,\r\n  numLands: PropTypes.string.isRequired,\r\n  setNumLands: PropTypes.func.isRequired,\r\n}\r\n","import React, { useState, useEffect, Fragment, createRef } from 'react'\r\nimport { getRandomisedLands } from './utils/LandUtils'\r\nimport { useLocalStorage } from './utils/Hooks'\r\nimport { DeckEntry } from './components/DeckEntry'\r\nimport { LandDisplay } from './components/LandDisplay'\r\nimport { LandFilter } from './components/LandFilter'\r\nimport { Modal } from './components/Modal'\r\nimport { ModifierBar } from './components/ModifierBar'\r\nimport { Footer } from './components/Footer'\r\nimport lands from './data/lands.json'\r\nimport gear from './images/settings.svg'\r\nimport styles from './App.module.scss'\r\nimport './stylesheets/global.module.scss'\r\n\r\nconst App = () => {\r\n  const footerRef = createRef()\r\n  const [numLands, setNumLands] = useLocalStorage('numLands', '1')\r\n  const [userLang, setUserLang] = useLocalStorage('language', 'en')\r\n  const [filteredLands, setFilteredLands] = useLocalStorage('filteredLands', {\r\n    Plains: [],\r\n    Island: [],\r\n    Swamp: [],\r\n    Mountain: [],\r\n    Forest: [],\r\n  })\r\n\r\n  const [randomLands, setRandomLands] = useState({})\r\n  useEffect(() => {\r\n    setRandomLands(getRandomisedLands(filteredLands, 'all'))\r\n  }, [])\r\n\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false)\r\n    getNewLands('all')\r\n  }\r\n\r\n  const getNewLands = (land = 'all') => {\r\n    setRandomLands(getRandomisedLands(filteredLands, land, randomLands))\r\n  }\r\n\r\n  const scrollToFooter = () => {\r\n    window.scrollTo({\r\n      top: footerRef.current.offsetTop,\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Modal isOpen={modalOpen}>\r\n        <LandFilter\r\n          filteredLands={filteredLands}\r\n          setFilteredLands={setFilteredLands}\r\n          landData={lands}\r\n          closeModal={closeModal}\r\n          userLang={userLang}\r\n        />\r\n      </Modal>\r\n      <div className={styles.app}>\r\n        <h1 className={styles.header}>Landcycler</h1>\r\n        <button className={styles.settings} onClick={scrollToFooter}>\r\n          <img src={gear} alt=\"Settings\" />\r\n        </button>\r\n        <div className={styles.landIcons}>\r\n          <i className=\"ms ms-cost ms-w\" />\r\n          <i className=\"ms ms-cost ms-u\" />\r\n          <i className=\"ms ms-cost ms-b\" />\r\n          <i className=\"ms ms-cost ms-r\" />\r\n          <i className=\"ms ms-cost ms-g\" />\r\n        </div>\r\n        <DeckEntry\r\n          newLands={randomLands}\r\n          userLang={userLang}\r\n          numLands={parseInt(numLands)}\r\n        />\r\n        <LandDisplay\r\n          lands={randomLands}\r\n          setRandomLands={getNewLands}\r\n          userLang={userLang}\r\n        />\r\n        <ModifierBar\r\n          setRandomLands={getNewLands}\r\n          openFilter={() => setModalOpen(true)}\r\n        />\r\n      </div>\r\n      <div ref={footerRef}>\r\n        <Footer\r\n          userLang={userLang}\r\n          setUserLang={setUserLang}\r\n          numLands={numLands}\r\n          setNumLands={setNumLands}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__ZEKbq\",\"header\":\"App_header__1-lCX\",\"landIcons\":\"App_landIcons__1IqVd\",\"settings\":\"App_settings__2WnVQ\"};"],"sourceRoot":""}