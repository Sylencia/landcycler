{"version":3,"sources":["components/Footer/Footer.module.scss","components/LandFilter/LandFilter.module.scss","components/DeckEntry/DeckEntry.module.scss","App.module.scss","components/LandDisplay/LandDisplay.module.scss","components/Modal/Modal.module.scss","components/ModifierBar/ModifierBar.module.scss","LandUtils.js","components/DeckEntry/DeckEntry.jsx","components/LandDisplay/LandDisplay.jsx","components/LandFilter/LandFilter.jsx","components/Modal/Modal.jsx","components/ModifierBar/ModifierBar.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","main","innerContainer","contact","credits","options","header","list","link","select","optionTitle","container","heading","land","removed","image","button","buttonContainer","input","plains","label","island","swamp","mountain","forest","tab","landCountLabel","deckSection","deckDisplay","deckContainer","title","arrow","app","modalOpen","landIcons","modal","getRandomisedLands","landData","oldLands","arguments","length","undefined","Object","keys","reduce","newLands","landType","max","possibleLands","filter","selectable","Math","floor","random","changeLandsInDeck","deck","lands","userLang","split","map","card","splitCard","_splitCard","slicedToArray","count","name","values","languageData","find","val","getLandTypeFromLanguage","cardName","concat","join","translateLandName","language","_data$find","entries","_ref","DeckEntry","updateDeck","newDeckRef","createRef","react_default","a","createElement","className","styles","value","onChange","e","target","spellCheck","readOnly","ref","onClick","current","LandDisplay","setRandomLands","_land","tLandName","displayName","key","src","imageUrl","alt","LandFilter","setLandData","closeModal","_useState","useState","_useState2","setTab","updateActiveTab","id","tabs","allTabs","activeLandCount","landName","push","react","cx","toLowerCase","type","checked","htmlFor","filteredLands","filteredLandName","defineProperty","foundLand","objectSpread","onLandClick","disabled","Modal","children","isOpen","createPortal","document","body","ModifierBar","openFilter","Footer","setUserLang","href","App","useEffect","savedLanguage","localStorage","getItem","setItem","_useState3","data","_useState4","savedVersion","savedData","version","JSON","parse","stringify","_useState5","_useState6","userDeck","setUserDeck","_useState7","_useState8","randomLands","_useState9","_useState10","setModalOpen","getNewLands","Modal_Modal","LandFilter_LandFilter","forEach","_ref2","rLandType","rLandData","dataLand","classList","remove","DeckEntry_DeckEntry","LandDisplay_LandDisplay","ModifierBar_ModifierBar","add","Footer_Footer","newLang","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,eAAA,+BAAAC,QAAA,wBAAAC,QAAA,wBAAAC,QAAA,wBAAAC,OAAA,uBAAAC,KAAA,qBAAAC,KAAA,qBAAAC,OAAA,uBAAAC,YAAA,+CCAlBX,EAAAC,QAAA,CAAkBW,UAAA,8BAAAC,QAAA,4BAAAC,KAAA,yBAAAC,QAAA,4BAAAC,MAAA,0BAAAC,OAAA,2BAAAC,gBAAA,oCAAAC,MAAA,0BAAAC,OAAA,2BAAAC,MAAA,0BAAAC,OAAA,2BAAAC,MAAA,0BAAAC,SAAA,6BAAAC,OAAA,2BAAAC,IAAA,wBAAAC,eAAA,qDCAlB3B,EAAAC,QAAA,CAAkB2B,YAAA,+BAAAC,YAAA,+BAAAC,cAAA,iCAAAC,MAAA,yBAAAC,MAAA,wrPCAlBhC,EAAAC,QAAA,CAAkBgC,IAAA,iBAAAC,UAAA,uBAAA3B,OAAA,oBAAA4B,UAAA,24BCAlBnC,EAAAC,QAAA,CAAkBW,UAAA,+BAAAE,KAAA,0BAAAE,MAAA,gDCAlBhB,EAAAC,QAAA,CAAkBmC,MAAA,uCCAlBpC,EAAAC,QAAA,CAAkBgB,OAAA,sMCGLoB,EAAqB,SAACC,EAAUxB,GAAwB,IAAlByB,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAY5D,OAXkBG,OAAOC,KAAKN,GACIO,OAAO,SAACC,EAAUC,GAClD,IALiBC,EAKXC,EAAgBX,EAASS,GAAUG,OAAO,SAAApC,GAAI,OAAIA,EAAKqC,aAM7D,OAJEL,EAASC,GADE,QAATjC,GAAkBA,IAASiC,EACRE,GAPND,EAOiCC,EAAcR,OAPxCW,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAML,MASvCT,EAASQ,GAEzBD,GACN,KAKQS,EAAoB,SAACC,EAAMC,GAA2B,IAApBC,EAAoBlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAoBxD,OAnBkBgB,EAAKG,MAAM,MACEC,IAAI,SAAAC,GACjC,IAAMC,EAAYD,EAAKF,MAAM,KAC7B,GAAyB,IAArBG,EAAUrB,OAAc,KAAAsB,EAAApB,OAAAqB,EAAA,EAAArB,CACJmB,EADI,GACnBG,EADmBF,EAAA,GACZG,EADYH,EAAA,GAM1B,QAAkBrB,IAHAC,OAAOwB,OAAOC,EAAaV,IAAWW,KACtD,SAAAC,GAAG,OAAIA,IAAQJ,IAEY,CAC3B,IAAMnB,EAAWwB,EAAwBL,EAAMR,GACzCc,EAAQ,GAAAC,OAAMP,EAAN,KAAAO,OAAchB,EAAMV,GAAUmB,MAC5C,SAAAO,OAAUR,EAAV,KAAAQ,OAAmBD,IAIvB,OAAOX,IAGWa,KAAK,OAGdC,EAAoB,SAACT,GAAD,IAAOU,EAAPpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAkB,KAAlB,OAC/B4B,EAAaQ,GAAUV,IAEZK,EAA0B,SAACL,GAA0B,IAApBU,EAAoBpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAASqC,EACnDlC,OAAOmC,QAAQV,EAAaQ,IACnBP,KAAK,SAAAU,GAAA,OAAApC,OAAAqB,EAAA,EAAArB,CAAAoC,EAAA,QAAmCb,IAC9D,OAHgEvB,OAAAqB,EAAA,EAAArB,CAAAkC,EAAA,uBCxCrDG,EAAY,SAAAD,GAA8C,IAA3CvB,EAA2CuB,EAA3CvB,KAAMV,EAAqCiC,EAArCjC,SAAUmC,EAA2BF,EAA3BE,WAAYvB,EAAeqB,EAAfrB,SAChDwB,EAAaC,sBAEnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO5D,aACrBwD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO1D,eACrBsD,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOzD,OAAxB,iBACAqD,EAAAC,EAAAC,cAAA,YACEC,UAAWC,IAAO3D,YAClB4D,MAAOjC,EACPkC,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOH,QACnCI,WAAW,WAGfT,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOxD,OAAxB,UACAoD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO1D,eACrBsD,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOzD,OAAxB,uBACAqD,EAAAC,EAAAC,cAAA,YACEC,UAAWC,IAAO3D,YAClBiE,UAAQ,EACRC,IAAKb,EACLO,MAAOlC,EAAkBC,EAAMV,EAAUY,GACzCsC,QAAS,kBAAMd,EAAWe,QAAQvF,UAClCmF,WAAW,8BCrBRK,EAAc,SAAAnB,GAAA,IAAGtB,EAAHsB,EAAGtB,MAAO0C,EAAVpB,EAAUoB,eAAgBzC,EAA1BqB,EAA0BrB,SAA1B,OACzB0B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO5E,WACpB+B,OAAOmC,QAAQrB,GAAOG,IAAI,SAAA9C,GAAQ,IAAAsF,EAAAzD,OAAAqB,EAAA,EAAArB,CACJ7B,EADI,GAC1BiC,EAD0BqD,EAAA,GAChB9D,EADgB8D,EAAA,GAE3BC,EAAY1B,EAAkB5B,EAAUW,GACxC4C,EAAW,GAAA7B,OAAM4B,EAAN,KAAA5B,OAAmBnC,EAAS4B,MAC7C,OACEkB,EAAAC,EAAAC,cAAA,OAAKiB,IAAKxD,EAAUwC,UAAWC,IAAO1E,MACnCwF,EACDlB,EAAAC,EAAAC,cAAA,OACEC,UAAWC,IAAOxE,MAClBwF,IAAKlE,EAASmE,SACdC,IAAKJ,EACLN,QAAS,kBAAMG,EAAepD,2DCZ7B4D,EAAa,SAAA5B,GAAqD,IAAlDzC,EAAkDyC,EAAlDzC,SAAUsE,EAAwC7B,EAAxC6B,YAAaC,EAA2B9B,EAA3B8B,WAAYnD,EAAeqB,EAAfrB,SAAeoD,EACvDC,mBAAS,UAD8CC,EAAArE,OAAAqB,EAAA,EAAArB,CAAAmE,EAAA,GACtEpF,EADsEsF,EAAA,GACjEC,EADiED,EAAA,GAEvEE,EAAkB,SAAAvB,GAAC,OAAIsB,EAAOtB,EAAEC,OAAOuB,KAIvCC,EAFWzE,OAAOC,KAAKN,GAEPO,OAAO,SAACwE,EAASvG,GACrC,IACMwG,EADOhF,EAASxB,GACOoC,OAAO,SAAApC,GAAI,OAAIA,EAAKqC,aAAYV,OACvD8E,EAAW5C,EAAkB7D,EAAM4C,GAiBzC,OAfA2D,EAAQG,KACNpC,EAAAC,EAAAC,cAACmC,EAAA,SAAD,CAAUlB,IAAG,UAAA9B,OAAY3D,IACvBsE,EAAAC,EAAAC,cAAA,SACEC,UAAWmC,IAAGlC,IAAOrE,MAAOqE,IAAO1E,EAAK6G,gBACxCR,GAAIrG,EACJ8G,KAAK,QACLC,QAASnG,IAAQZ,EACjB4E,SAAUwB,IAEZ9B,EAAAC,EAAAC,cAAA,SAAOC,UAAWC,IAAOnE,MAAOyG,QAAShH,GACvCsE,EAAAC,EAAAC,cAAA,YAAOiC,GACPnC,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAO7D,gBAAxB,IAA0C2F,EAA1C,QAICD,GACN,IAEGU,EAAgBzF,EAASZ,GACzB4F,EAAkBS,EAAc7E,OAAO,SAAApC,GAAI,OAAIA,EAAKqC,aAAYV,OAChEuF,EAAmBrD,EAAkBjD,EAAKgC,GAgBhD,OACE0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO9D,KAAM0F,GAC7BhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO5E,WACpBmH,EAAcnE,IAAI,SAAA9C,GACjB,IAAMwF,EAAW,GAAA7B,OAAMuD,EAAN,KAAAvD,OAA0B3D,EAAKoD,MAChD,OACEkB,EAAAC,EAAAC,cAAA,OACEiB,IAAKzF,EAAKoD,KACVqB,UAAWmC,IAAGlC,IAAO1E,KAAR6B,OAAAsF,EAAA,EAAAtF,CAAA,GACV6C,IAAOzE,SAAWD,EAAKqC,aAE1B6C,QAAS,kBA1BD,SAAA9B,GAClB,IAAMgE,EAAYH,EAAc1D,KAAK,SAAAvD,GAAI,OAAIA,EAAKoD,OAASA,IAEnC,IAApBoD,GAAyBY,EAAU/E,aAIvC+E,EAAU/E,YAAc+E,EAAU/E,WAClCyD,EAAYjE,OAAAwF,EAAA,EAAAxF,CAAA,GACPL,EADMK,OAAAsF,EAAA,EAAAtF,CAAA,GAERjB,EAAMqG,MAgBgBK,CAAYtH,EAAKoD,QAE/BoC,EACDlB,EAAAC,EAAAC,cAAA,OACEC,UAAWC,IAAOxE,MAClBwF,IAAK1F,EAAK2F,SACVC,IAAKJ,QAMflB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOtE,iBACrBkE,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACV8C,SAAUf,EAAkB,EAC5BtB,QAASa,GAHX,oCC3EKyB,EAAQ,SAAAvD,GAAA,IAAGwD,EAAHxD,EAAGwD,SAAH,OAAAxD,EAAayD,OAE5BC,uBACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpD,OAAQmG,GAC/BG,SAASC,MAEX,uBCPOC,EAAc,SAAA7D,GAAA,IAAG8D,EAAH9D,EAAG8D,WAAY1C,EAAfpB,EAAeoB,eAAf,OACzBf,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOvE,QACrBmE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcS,QAAS6C,GAAzC,UAIAzD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcS,QAAS,kBAAMG,MAA/C,mCCNS2C,EAAS,SAAA/D,GAAA,IAAGrB,EAAHqB,EAAGrB,SAAUqF,EAAbhE,EAAagE,YAAb,OACpB3D,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOtF,MACrBkF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOrF,gBACrBiF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOlF,SACrB8E,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOjF,QAAtB,WACA6E,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAO7E,aAAxB,YACAyE,EAAAC,EAAAC,cAAA,UACEC,UAAWC,IAAO9E,OAClB+E,MAAO/B,EACPgC,SAAU,SAAAC,GAAC,OAAIoD,EAAYpD,EAAEC,OAAOH,SAEpCL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,WACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,WACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,UACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,UACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,WACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,cACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,YACAL,EAAAC,EAAAC,cAAA,UAAQG,MAAM,MAAd,aAGJL,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOnF,SACrB+E,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOjF,QAAtB,WACA6E,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOhF,MACpB4E,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,UACG,2BACDF,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAO/E,KAAMuI,KAAK,yBAAhC,aAIF5D,EAAAC,EAAAC,cAAA,UACG,0BACDF,EAAAC,EAAAC,cAAA,KACEC,UAAWC,IAAO/E,KAClBuI,KAAK,uCAFP,mBASN5D,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpF,SACrBgF,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOjF,QAAtB,cACA6E,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOhF,MACpB4E,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAO/E,KAAMuI,KAAK,qCAAhC,WAIF5D,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAO/E,KAAMuI,KAAK,+BAAhC,uCC6DGC,SAxGH,WAAM,IAAAnC,EACgBC,mBAAS,MADzBC,EAAArE,OAAAqB,EAAA,EAAArB,CAAAmE,EAAA,GACTpD,EADSsD,EAAA,GACC+B,EADD/B,EAAA,GAEhBkC,oBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAAQ,YAEvCF,EACFJ,EAAYI,GAEZC,aAAaE,QAAQ,WAAY5F,IAElC,IAVa,IAAA6F,EAYgBxC,mBAAStD,EAAM+F,MAZ/BC,EAAA9G,OAAAqB,EAAA,EAAArB,CAAA4G,EAAA,GAYTjH,EAZSmH,EAAA,GAYC7C,EAZD6C,EAAA,GAahBP,oBAAU,WACR,IAAMQ,EAAeN,aAAaC,QAAQ,YAAc,EAClDM,EAAYP,aAAaC,QAAQ,QACnC5F,EAAMmG,SAAWF,GAAgBC,EACnC/C,EAAYiD,KAAKC,MAAMH,KAEvBP,aAAaE,QAAQ,OAAQO,KAAKE,UAAUtG,EAAM+F,OAClDJ,aAAaE,QAAQ,UAAW7F,EAAMmG,WAEvC,IAtBa,IAAAI,EAwBgBjD,mBAAS,IAxBzBkD,EAAAtH,OAAAqB,EAAA,EAAArB,CAAAqH,EAAA,GAwBTE,EAxBSD,EAAA,GAwBCE,EAxBDF,EAAA,GAAAG,EAyBsBrD,mBAAS,IAzB/BsD,EAAA1H,OAAAqB,EAAA,EAAArB,CAAAyH,EAAA,GAyBTE,EAzBSD,EAAA,GAyBIlE,EAzBJkE,EAAA,GA0BhBnB,oBAAU,WACR,IAAMQ,EAAeN,aAAaC,QAAQ,YAAc,EAClDM,EAAYP,aAAaC,QAAQ,QACnC5F,EAAMmG,SAAWF,GAAgBC,EACnCxD,EAAe9D,EAAmBwH,KAAKC,MAAMH,GAAY,QAEzDxD,EAAe9D,EAAmBC,EAAU,SAE7C,IAlCa,IAAAiI,EAmCkBxD,oBAAS,GAnC3ByD,EAAA7H,OAAAqB,EAAA,EAAArB,CAAA4H,EAAA,GAmCTrI,EAnCSsI,EAAA,GAmCEC,EAnCFD,EAAA,GA0DVE,EAAc,WAAkB,IAAjB5J,EAAiB0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,MAC1B2D,EAAe9D,EAAmBC,EAAUxB,EAAMwJ,KAQpD,OACElF,EAAAC,EAAAC,cAACmC,EAAA,SAAD,KACErC,EAAAC,EAAAC,cAACqF,EAAD,CAAOnC,OAAQtG,GACbkD,EAAAC,EAAAC,cAACsF,EAAD,CACEtI,SAAUA,EACVsE,YAAaA,EACbC,WApCW,WACjB4D,GAAa,GACb9H,OAAOmC,QAAQwF,GAAaO,QAAQ,SAAA9F,GAA4B,IAAA+F,EAAAnI,OAAAqB,EAAA,EAAArB,CAAAoC,EAAA,GAA1BgG,EAA0BD,EAAA,GAAfE,EAAeF,EAAA,GACjDxI,EAASyI,GAAW1G,KAC/B,SAAA4G,GAAQ,OAAIA,EAAS/G,OAAS8G,EAAU9G,OAGhCf,YACRuH,EAAYK,KAGhB3B,aAAaE,QAAQ,UAAW7F,EAAMmG,SACtCR,aAAaE,QAAQ,OAAQO,KAAKE,UAAUzH,IAC5CoG,SAASC,KAAKuC,UAAUC,OAAO3F,IAAOtD,YAwBhCwB,SAAUA,KAGd0B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOvD,KACrBmD,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOjF,QAAtB,cACA6E,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOrD,WACrBiD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAEfH,EAAAC,EAAAC,cAAC8F,EAAD,CACE5H,KAAM0G,EACNpH,SAAUwH,EACVrF,WAAYkF,EACZzG,SAAUA,IAEZ0B,EAAAC,EAAAC,cAAC+F,EAAD,CACE5H,MAAO6G,EACPnE,eAAgBuE,EAChBhH,SAAUA,IAEZ0B,EAAAC,EAAAC,cAACgG,EAAD,CAAanF,eAAgBuE,EAAa7B,WAnC9B,WAChB4B,GAAa,GACb/B,SAASC,KAAKuC,UAAUK,IAAI/F,IAAOtD,eAmCjCkD,EAAAC,EAAAC,cAACkG,EAAD,CAAQ9H,SAAUA,EAAUqF,YA9CT,SAAA0C,GACrB1C,EAAY0C,GACZrC,aAAaE,QAAQ,WAAYmC,SCvDjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5G,EAAAC,EAAAC,cAAC2G,EAAD,MAASvD,SAASwD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c923835.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Footer_main__3B_lJ\",\"innerContainer\":\"Footer_innerContainer__1lmfm\",\"contact\":\"Footer_contact__1WyII\",\"credits\":\"Footer_credits__1FZWf\",\"options\":\"Footer_options__3LUs4\",\"header\":\"Footer_header__QywmT\",\"list\":\"Footer_list__1oJAa\",\"link\":\"Footer_link__108CD\",\"select\":\"Footer_select__L7JNg\",\"optionTitle\":\"Footer_optionTitle__1AbRm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandFilter_container__aTiQo\",\"heading\":\"LandFilter_heading__iRzfJ\",\"land\":\"LandFilter_land__1vdKd\",\"removed\":\"LandFilter_removed__3PV5-\",\"image\":\"LandFilter_image__o8TSf\",\"button\":\"LandFilter_button__11hDu\",\"buttonContainer\":\"LandFilter_buttonContainer__td_Y8\",\"input\":\"LandFilter_input__2sj5V\",\"plains\":\"LandFilter_plains__1-7_r\",\"label\":\"LandFilter_label__UNz49\",\"island\":\"LandFilter_island__31OyO\",\"swamp\":\"LandFilter_swamp__tXDu2\",\"mountain\":\"LandFilter_mountain__3kwKP\",\"forest\":\"LandFilter_forest__3jpjm\",\"tab\":\"LandFilter_tab__3M7KA\",\"landCountLabel\":\"LandFilter_landCountLabel__gBI_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deckSection\":\"DeckEntry_deckSection__11RcE\",\"deckDisplay\":\"DeckEntry_deckDisplay__2xB04\",\"deckContainer\":\"DeckEntry_deckContainer__3wsIT\",\"title\":\"DeckEntry_title__2Iz36\",\"arrow\":\"DeckEntry_arrow__1ydn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2h9bQ\",\"modalOpen\":\"App_modalOpen__3ccT6\",\"header\":\"App_header__tHlvO\",\"landIcons\":\"App_landIcons__2ntT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandDisplay_container__1YDom\",\"land\":\"LandDisplay_land__2W98F\",\"image\":\"LandDisplay_image__4UhiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__10bc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ModifierBar_button__2YEuD\"};","import languageData from './data/languages.json'\n\nconst getRandomInt = max => Math.floor(Math.random() * Math.floor(max))\n\nexport const getRandomisedLands = (landData, land, oldLands = {}) => {\n  const landTypes = Object.keys(landData)\n  const randomisedLands = landTypes.reduce((newLands, landType) => {\n    const possibleLands = landData[landType].filter(land => land.selectable)\n    if (land === 'all' || land === landType) {\n      newLands[landType] = possibleLands[getRandomInt(possibleLands.length)]\n    } else {\n      newLands[landType] = oldLands[landType]\n    }\n    return newLands\n  }, {})\n\n  return randomisedLands\n}\n\nexport const changeLandsInDeck = (deck, lands, userLang = 'en') => {\n  const deckArray = deck.split('\\n')\n  const newDeckArray = deckArray.map(card => {\n    const splitCard = card.split(' ')\n    if (splitCard.length === 4) {\n      const [count, name] = splitCard\n      // First check if their card is in their language\n      const foundName = Object.values(languageData[userLang]).find(\n        val => val === name\n      )\n      if (foundName !== undefined) {\n        const landType = getLandTypeFromLanguage(name, userLang)\n        const cardName = `${name} ${lands[landType].name}`\n        return `${count} ${cardName}`\n      }\n    }\n\n    return card\n  })\n\n  return newDeckArray.join('\\n')\n}\n\nexport const translateLandName = (name, language = 'en') =>\n  languageData[language][name]\n\nexport const getLandTypeFromLanguage = (name, language = 'en') => {\n  const data = Object.entries(languageData[language])\n  const [enName] = data.find(([, translated]) => translated === name)\n  return enName\n}\n","import React, { createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { changeLandsInDeck } from '../../LandUtils'\nimport styles from './DeckEntry.module.scss'\n\nexport const DeckEntry = ({ deck, newLands, updateDeck, userLang }) => {\n  const newDeckRef = createRef()\n\n  return (\n    <div className={styles.deckSection}>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Imported Deck</span>\n        <textarea\n          className={styles.deckDisplay}\n          value={deck}\n          onChange={e => updateDeck(e.target.value)}\n          spellCheck=\"false\"\n        />\n      </div>\n      <span className={styles.arrow}>➡</span>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Export to MTG Arena</span>\n        <textarea\n          className={styles.deckDisplay}\n          readOnly\n          ref={newDeckRef}\n          value={changeLandsInDeck(deck, newLands, userLang)}\n          onClick={() => newDeckRef.current.select()}\n          spellCheck=\"false\"\n        />\n      </div>\n    </div>\n  )\n}\n\nDeckEntry.propTypes = {\n  deck: PropTypes.string.isRequired,\n  newLands: PropTypes.shape().isRequired,\n  updateDeck: PropTypes.func.isRequired,\n  userLang: PropTypes.string.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { translateLandName } from '../../LandUtils'\n\nimport styles from './LandDisplay.module.scss'\n\nexport const LandDisplay = ({ lands, setRandomLands, userLang }) => (\n  <div className={styles.container}>\n    {Object.entries(lands).map(land => {\n      const [landType, landData] = land\n      const tLandName = translateLandName(landType, userLang)\n      const displayName = `${tLandName} ${landData.name}`\n      return (\n        <div key={landType} className={styles.land}>\n          {displayName}\n          <img\n            className={styles.image}\n            src={landData.imageUrl}\n            alt={displayName}\n            onClick={() => setRandomLands(landType)}\n          />\n        </div>\n      )\n    })}\n  </div>\n)\n\nLandDisplay.propTypes = {\n  lands: PropTypes.shape().isRequired,\n  setRandomLands: PropTypes.func.isRequired,\n  userLang: PropTypes.string.isRequired,\n}\n","import React, { useState, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport { translateLandName } from '../../LandUtils'\n\nimport styles from './LandFilter.module.scss'\n\nexport const LandFilter = ({ landData, setLandData, closeModal, userLang }) => {\n  const [tab, setTab] = useState('Plains')\n  const updateActiveTab = e => setTab(e.target.id)\n\n  const allLands = Object.keys(landData)\n\n  const tabs = allLands.reduce((allTabs, land) => {\n    const data = landData[land]\n    const activeLandCount = data.filter(land => land.selectable).length\n    const landName = translateLandName(land, userLang)\n\n    allTabs.push(\n      <Fragment key={`filter_${land}`}>\n        <input\n          className={cx(styles.input, styles[land.toLowerCase()])}\n          id={land}\n          type=\"radio\"\n          checked={tab === land}\n          onChange={updateActiveTab}\n        />\n        <label className={styles.label} htmlFor={land}>\n          <span>{landName}</span>\n          <span className={styles.landCountLabel}>({activeLandCount})</span>\n        </label>\n      </Fragment>\n    )\n    return allTabs\n  }, [])\n\n  const filteredLands = landData[tab]\n  const activeLandCount = filteredLands.filter(land => land.selectable).length\n  const filteredLandName = translateLandName(tab, userLang)\n\n  const onLandClick = name => {\n    const foundLand = filteredLands.find(land => land.name === name)\n    // Don't allow them to go below 1 active land\n    if (activeLandCount === 1 && foundLand.selectable) {\n      return\n    }\n\n    foundLand.selectable = !foundLand.selectable\n    setLandData({\n      ...landData,\n      [tab]: filteredLands,\n    })\n  }\n\n  return (\n    <div>\n      <div className={styles.tab}>{tabs}</div>\n      <div className={styles.container}>\n        {filteredLands.map(land => {\n          const displayName = `${filteredLandName} ${land.name}`\n          return (\n            <div\n              key={land.name}\n              className={cx(styles.land, {\n                [styles.removed]: !land.selectable,\n              })}\n              onClick={() => onLandClick(land.name)}\n            >\n              {displayName}\n              <img\n                className={styles.image}\n                src={land.imageUrl}\n                alt={displayName}\n              />\n            </div>\n          )\n        })}\n      </div>\n      <div className={styles.buttonContainer}>\n        <button\n          className=\"main-button\"\n          disabled={activeLandCount < 1}\n          onClick={closeModal}\n        >\n          Save Filters\n        </button>\n      </div>\n    </div>\n  )\n}\n\nLandFilter.propTypes = {\n  landData: PropTypes.shape().isRequired,\n  setLandData: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  userLang: PropTypes.string.isRequired,\n}\n","import React from 'react'\nimport { createPortal } from 'react-dom'\n\nimport styles from './Modal.module.scss'\n\nexport const Modal = ({ children, isOpen }) =>\n  isOpen\n    ? createPortal(\n        <div className={styles.modal}>{children}</div>,\n        document.body\n      )\n    : null\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './ModifierBar.module.scss'\n\nexport const ModifierBar = ({ openFilter, setRandomLands }) => (\n  <div className={styles.button}>\n    <button className=\"main-button\" onClick={openFilter}>\n      Filter\n    </button>\n\n    <button className=\"main-button\" onClick={() => setRandomLands()}>\n      Randomise All\n    </button>\n  </div>\n)\n\nModifierBar.propTypes = {\n  setRandomLands: PropTypes.func.isRequired,\n  openFilter: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './Footer.module.scss'\n\nexport const Footer = ({ userLang, setUserLang }) => (\n  <div className={styles.main}>\n    <div className={styles.innerContainer}>\n      <div className={styles.options}>\n        <h5 className={styles.header}>Options</h5>\n        <span className={styles.optionTitle}>Language</span>\n        <select\n          className={styles.select}\n          value={userLang}\n          onChange={e => setUserLang(e.target.value)}\n        >\n          <option value=\"en\">English</option>\n          <option value=\"es\">Spanish</option>\n          <option value=\"fr\">French</option>\n          <option value=\"de\">German</option>\n          <option value=\"it\">Italian</option>\n          <option value=\"pt\">Portuguese</option>\n          <option value=\"ja\">Japanese</option>\n          <option value=\"ru\">Russian</option>\n        </select>\n      </div>\n      <div className={styles.credits}>\n        <h5 className={styles.header}>Credits</h5>\n        <ul className={styles.list}>\n          <li>Landcycler created by Sylencia</li>\n          <li>\n            {'Land images provided by '}\n            <a className={styles.link} href=\"https://scryfall.com/\">\n              Scryfall\n            </a>\n          </li>\n          <li>\n            {'Mana icons provided by '}\n            <a\n              className={styles.link}\n              href=\"https://andrewgioia.github.io/Mana/\"\n            >\n              Andrew Gioia\n            </a>\n          </li>\n        </ul>\n      </div>\n      <div className={styles.contact}>\n        <h5 className={styles.header}>Contact me</h5>\n        <ul className={styles.list}>\n          <li>\n            <a className={styles.link} href=\"https://www.reddit.com/u/Sylencia\">\n              Reddit\n            </a>\n          </li>\n          <li>\n            <a className={styles.link} href=\"https://github.com/Sylencia\">\n              Github\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n)\n\nFooter.propTypes = {\n  userLang: PropTypes.string.isRequired,\n  setUserLang: PropTypes.func.isRequired,\n}\n","import React, { useState, useEffect, Fragment } from 'react'\nimport { getRandomisedLands } from './LandUtils'\nimport { DeckEntry } from './components/DeckEntry'\nimport { LandDisplay } from './components/LandDisplay'\nimport { LandFilter } from './components/LandFilter'\nimport { Modal } from './components/Modal'\nimport { ModifierBar } from './components/ModifierBar'\nimport { Footer } from './components/Footer'\nimport lands from './data/lands.json'\nimport styles from './App.module.scss'\nimport './stylesheets/global.module.scss'\n\nconst App = () => {\n  const [userLang, setUserLang] = useState('en')\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('language')\n\n    if (savedLanguage) {\n      setUserLang(savedLanguage)\n    } else {\n      localStorage.setItem('language', userLang)\n    }\n  }, [])\n\n  const [landData, setLandData] = useState(lands.data)\n  useEffect(() => {\n    const savedVersion = localStorage.getItem('version') || 0\n    const savedData = localStorage.getItem('data')\n    if (lands.version <= savedVersion && savedData) {\n      setLandData(JSON.parse(savedData))\n    } else {\n      localStorage.setItem('data', JSON.stringify(lands.data))\n      localStorage.setItem('version', lands.version)\n    }\n  }, [])\n\n  const [userDeck, setUserDeck] = useState('')\n  const [randomLands, setRandomLands] = useState({})\n  useEffect(() => {\n    const savedVersion = localStorage.getItem('version') || 0\n    const savedData = localStorage.getItem('data')\n    if (lands.version <= savedVersion && savedData) {\n      setRandomLands(getRandomisedLands(JSON.parse(savedData), 'all'))\n    } else {\n      setRandomLands(getRandomisedLands(landData, 'all'))\n    }\n  }, [])\n  const [modalOpen, setModalOpen] = useState(false)\n\n  const closeModal = () => {\n    setModalOpen(false)\n    Object.entries(randomLands).forEach(([rLandType, rLandData]) => {\n      const info = landData[rLandType].find(\n        dataLand => dataLand.name === rLandData.name\n      )\n\n      if (!info.selectable) {\n        getNewLands(rLandType)\n      }\n    })\n    localStorage.setItem('version', lands.version)\n    localStorage.setItem('data', JSON.stringify(landData))\n    document.body.classList.remove(styles.modalOpen)\n  }\n\n  const changeLanguage = newLang => {\n    setUserLang(newLang)\n    localStorage.setItem('language', newLang)\n  }\n\n  const getNewLands = (land = 'all') => {\n    setRandomLands(getRandomisedLands(landData, land, randomLands))\n  }\n\n  const openModal = () => {\n    setModalOpen(true)\n    document.body.classList.add(styles.modalOpen)\n  }\n\n  return (\n    <Fragment>\n      <Modal isOpen={modalOpen}>\n        <LandFilter\n          landData={landData}\n          setLandData={setLandData}\n          closeModal={closeModal}\n          userLang={userLang}\n        />\n      </Modal>\n      <div className={styles.app}>\n        <h1 className={styles.header}>Landcycler</h1>\n        <div className={styles.landIcons}>\n          <i className=\"ms ms-cost ms-w\" />\n          <i className=\"ms ms-cost ms-u\" />\n          <i className=\"ms ms-cost ms-b\" />\n          <i className=\"ms ms-cost ms-r\" />\n          <i className=\"ms ms-cost ms-g\" />\n        </div>\n        <DeckEntry\n          deck={userDeck}\n          newLands={randomLands}\n          updateDeck={setUserDeck}\n          userLang={userLang}\n        />\n        <LandDisplay\n          lands={randomLands}\n          setRandomLands={getNewLands}\n          userLang={userLang}\n        />\n        <ModifierBar setRandomLands={getNewLands} openFilter={openModal} />\n      </div>\n      <Footer userLang={userLang} setUserLang={changeLanguage} />\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}