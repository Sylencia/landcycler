{"version":3,"sources":["components/Credits/Credits.module.scss","components/LandFilter/LandFilter.module.scss","components/DeckEntry/DeckEntry.module.scss","App.module.scss","components/LandDisplay/LandDisplay.module.scss","components/Modal/Modal.module.scss","components/ModifierBar/ModifierBar.module.scss","LandUtils.js","components/DeckEntry/DeckEntry.jsx","components/LandDisplay/LandDisplay.jsx","components/LandFilter/LandFilter.jsx","components/Modal/Modal.jsx","components/ModifierBar/ModifierBar.jsx","components/Credits/Credits.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","main","innerContainer","contact","credits","guide","header","list","guideList","link","container","heading","land","removed","image","button","buttonContainer","input","plains","label","island","swamp","mountain","forest","tab","landCountLabel","deckSection","deckDisplay","deckContainer","title","arrow","app","modalOpen","landIcons","modal","getRandomisedLands","landData","oldLands","arguments","length","undefined","Object","keys","reduce","newLands","landType","max","possibleLands","filter","selectable","Math","floor","random","changeLandsInDeck","deck","lands","split","map","card","splitCard","_splitCard","slicedToArray","count","name","concat","join","DeckEntry","_ref","updateDeck","newDeckRef","createRef","react_default","a","createElement","className","styles","value","onChange","e","target","spellCheck","readOnly","ref","onClick","current","select","LandDisplay","setRandomLands","entries","_land","key","src","imageUrl","alt","LandFilter","setLandData","closeModal","_useState","useState","_useState2","setTab","updateActiveTab","id","tabs","allTabs","activeLandCount","push","react","cx","toLowerCase","type","checked","htmlFor","filteredLands","defineProperty","foundLand","find","objectSpread","onLandClick","disabled","Modal","children","isOpen","createPortal","document","body","ModifierBar","openFilter","Credits","href","App","data","useEffect","savedVersion","localStorage","getItem","savedData","version","JSON","parse","setItem","stringify","_useState3","_useState4","userDeck","setUserDeck","_useState5","_useState6","randomLands","_useState7","_useState8","setModalOpen","getNewLands","Modal_Modal","LandFilter_LandFilter","forEach","_ref2","rLandType","rLandData","dataLand","classList","remove","DeckEntry_DeckEntry","LandDisplay_LandDisplay","ModifierBar_ModifierBar","add","Credits_Credits","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e1fe632.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Credits_main__3wxTK\",\"innerContainer\":\"Credits_innerContainer__1vCFM\",\"contact\":\"Credits_contact__3Y540\",\"credits\":\"Credits_credits__g_6KV\",\"guide\":\"Credits_guide__3oTkV\",\"header\":\"Credits_header__20t6J\",\"list\":\"Credits_list__IU3nT\",\"guideList\":\"Credits_guideList__1pmc6\",\"link\":\"Credits_link__3VLWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandFilter_container__aTiQo\",\"heading\":\"LandFilter_heading__iRzfJ\",\"land\":\"LandFilter_land__1vdKd\",\"removed\":\"LandFilter_removed__3PV5-\",\"image\":\"LandFilter_image__o8TSf\",\"button\":\"LandFilter_button__11hDu\",\"buttonContainer\":\"LandFilter_buttonContainer__td_Y8\",\"input\":\"LandFilter_input__2sj5V\",\"plains\":\"LandFilter_plains__1-7_r\",\"label\":\"LandFilter_label__UNz49\",\"island\":\"LandFilter_island__31OyO\",\"swamp\":\"LandFilter_swamp__tXDu2\",\"mountain\":\"LandFilter_mountain__3kwKP\",\"forest\":\"LandFilter_forest__3jpjm\",\"tab\":\"LandFilter_tab__3M7KA\",\"landCountLabel\":\"LandFilter_landCountLabel__gBI_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deckSection\":\"DeckEntry_deckSection__11RcE\",\"deckDisplay\":\"DeckEntry_deckDisplay__2xB04\",\"deckContainer\":\"DeckEntry_deckContainer__3wsIT\",\"title\":\"DeckEntry_title__2Iz36\",\"arrow\":\"DeckEntry_arrow__1ydn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2h9bQ\",\"modalOpen\":\"App_modalOpen__3ccT6\",\"header\":\"App_header__tHlvO\",\"landIcons\":\"App_landIcons__2ntT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandDisplay_container__1YDom\",\"land\":\"LandDisplay_land__2W98F\",\"image\":\"LandDisplay_image__4UhiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__10bc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ModifierBar_button__2YEuD\"};","const getRandomInt = max => Math.floor(Math.random() * Math.floor(max))\n\nexport const getRandomisedLands = (landData, land, oldLands = {}) => {\n  const landTypes = Object.keys(landData)\n  const randomisedLands = landTypes.reduce((newLands, landType) => {\n    const possibleLands = landData[landType].filter(land => land.selectable)\n    if (land === 'all' || land === landType) {\n      newLands[landType] = possibleLands[getRandomInt(possibleLands.length)]\n    } else {\n      newLands[landType] = oldLands[landType]\n    }\n    return newLands\n  }, {})\n\n  return randomisedLands\n}\n\nexport const changeLandsInDeck = (deck, lands) => {\n  const deckArray = deck.split('\\n')\n  const newDeckArray = deckArray.map(card => {\n    const splitCard = card.split(' ')\n    if (splitCard.length === 4) {\n      const [count, name] = splitCard\n      if (name in lands) {\n        return `${count} ${lands[name].name}`\n      }\n    }\n\n    return card\n  })\n\n  return newDeckArray.join('\\n')\n}\n","import React, { createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { changeLandsInDeck } from '../../LandUtils'\nimport styles from './DeckEntry.module.scss'\n\nexport const DeckEntry = ({ deck, newLands, updateDeck }) => {\n  const newDeckRef = createRef()\n\n  return (\n    <div className={styles.deckSection}>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Imported Deck</span>\n        <textarea\n          className={styles.deckDisplay}\n          value={deck}\n          onChange={e => updateDeck(e.target.value)}\n          spellCheck=\"false\"\n        />\n      </div>\n      <span className={styles.arrow}>➡</span>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Export to MTG Arena</span>\n        <textarea\n          className={styles.deckDisplay}\n          readOnly\n          ref={newDeckRef}\n          value={changeLandsInDeck(deck, newLands)}\n          onClick={() => newDeckRef.current.select()}\n          spellCheck=\"false\"\n        />\n      </div>\n    </div>\n  )\n}\n\nDeckEntry.propTypes = {\n  deck: PropTypes.string.isRequired,\n  newLands: PropTypes.shape().isRequired,\n  updateDeck: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './LandDisplay.module.scss'\n\nexport const LandDisplay = ({ lands, setRandomLands }) => (\n  <div className={styles.container}>\n    {Object.entries(lands).map(land => {\n      const [landType, landData] = land\n      return (\n        <div key={landType} className={styles.land}>\n          {landData.name}\n          <img\n            className={styles.image}\n            src={landData.imageUrl}\n            alt={landData.name}\n            onClick={() => setRandomLands(landType)}\n          />\n        </div>\n      )\n    })}\n  </div>\n)\n\nLandDisplay.propTypes = {\n  lands: PropTypes.shape().isRequired,\n  setRandomLands: PropTypes.func.isRequired,\n}\n","import React, { useState, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport styles from './LandFilter.module.scss'\n\nexport const LandFilter = ({ landData, setLandData, closeModal }) => {\n  const [tab, setTab] = useState('Plains')\n  const updateActiveTab = e => setTab(e.target.id)\n\n  const allLands = Object.keys(landData)\n\n  const tabs = allLands.reduce((allTabs, land) => {\n    const data = landData[land]\n    const activeLandCount = data.filter(land => land.selectable).length\n    const label = `${land} (${activeLandCount})`\n\n    allTabs.push(\n      <Fragment key={`filter_${land}`}>\n        <input\n          className={cx(styles.input, styles[land.toLowerCase()])}\n          id={land}\n          type=\"radio\"\n          checked={tab === land}\n          onChange={updateActiveTab}\n        />\n        <label className={styles.label} htmlFor={land}>\n          <span>{land}</span>\n          <span className={styles.landCountLabel}>({activeLandCount})</span>\n        </label>\n      </Fragment>\n    )\n    return allTabs\n  }, [])\n\n  const filteredLands = landData[tab]\n  const activeLandCount = filteredLands.filter(land => land.selectable).length\n\n  const onLandClick = name => {\n    const foundLand = filteredLands.find(land => land.name === name)\n    // Don't allow them to go below 1 active land\n    if (activeLandCount === 1 && foundLand.selectable) {\n      return\n    }\n\n    foundLand.selectable = !foundLand.selectable\n    setLandData({\n      ...landData,\n      [tab]: filteredLands,\n    })\n  }\n\n  return (\n    <div>\n      <div className={styles.tab}>{tabs}</div>\n      <div className={styles.container}>\n        {filteredLands.map(land => (\n          <div\n            key={land.name}\n            className={cx(styles.land, { [styles.removed]: !land.selectable })}\n            onClick={() => onLandClick(land.name)}\n          >\n            {land.name}\n            <img className={styles.image} src={land.imageUrl} alt={land.name} />\n          </div>\n        ))}\n      </div>\n      <div className={styles.buttonContainer}>\n        <button\n          className=\"main-button\"\n          disabled={activeLandCount < 1}\n          onClick={closeModal}\n        >\n          Save Filters\n        </button>\n      </div>\n    </div>\n  )\n}\n\nLandFilter.propTypes = {\n  landData: PropTypes.shape().isRequired,\n  setLandData: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport { createPortal } from 'react-dom'\n\nimport styles from './Modal.module.scss'\n\nexport const Modal = ({ children, isOpen }) =>\n  isOpen\n    ? createPortal(\n        <div className={styles.modal}>{children}</div>,\n        document.body\n      )\n    : null\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './ModifierBar.module.scss'\n\nexport const ModifierBar = ({ openFilter, setRandomLands }) => (\n  <div className={styles.button}>\n    <button className=\"main-button\" onClick={openFilter}>\n      Filter\n    </button>\n\n    <button className=\"main-button\" onClick={() => setRandomLands()}>\n      Randomise All\n    </button>\n  </div>\n)\n\nModifierBar.propTypes = {\n  setRandomLands: PropTypes.func.isRequired,\n  openFilter: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport styles from './Credits.module.scss'\n\nexport const Credits = () => (\n  <div className={styles.main}>\n    <div className={styles.innerContainer}>\n      <div className={styles.guide}>\n        <h5 className={styles.header}>Usage Tips</h5>\n        <ul className={styles.guideList}>\n          <li>Clicking on an image will reshuffle that land only.</li>\n        </ul>\n      </div>\n      <div className={styles.credits}>\n        <h5 className={styles.header}>Credits</h5>\n        <ul className={styles.list}>\n          <li>Landcycler created by Sylencia</li>\n          <li>\n            {'Land images provided by '}\n            <a className={styles.link} href=\"https://scryfall.com/\">\n              Scryfall\n            </a>\n          </li>\n          <li>\n            {'Mana icons provided by '}\n            <a\n              className={styles.link}\n              href=\"https://andrewgioia.github.io/Mana/\"\n            >\n              Andrew Gioia\n            </a>\n          </li>\n        </ul>\n      </div>\n      <div className={styles.contact}>\n        <h5 className={styles.header}>Contact me</h5>\n        <ul className={styles.list}>\n          <li>\n            <a className={styles.link} href=\"https://www.reddit.com/u/Sylencia\">\n              Reddit\n            </a>\n          </li>\n          <li>\n            <a className={styles.link} href=\"https://github.com/Sylencia\">\n              Github\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n)\n","import React, { useState, useEffect, Fragment } from 'react'\nimport { getRandomisedLands } from './LandUtils'\nimport { DeckEntry } from './components/DeckEntry'\nimport { LandDisplay } from './components/LandDisplay'\nimport { LandFilter } from './components/LandFilter'\nimport { Modal } from './components/Modal'\nimport { ModifierBar } from './components/ModifierBar'\nimport { Credits } from './components/Credits'\nimport lands from './data/lands.json'\nimport styles from './App.module.scss'\nimport './stylesheets/global.module.scss'\n\nconst App = () => {\n  const [landData, setLandData] = useState(lands.data)\n  // If there's a saved version of the data, use that instead (for filters)\n  useEffect(() => {\n    const savedVersion = localStorage.getItem('version') || 0\n    const savedData = localStorage.getItem('data')\n    if (lands.version <= savedVersion && savedData) {\n      setLandData(JSON.parse(savedData))\n    } else {\n      localStorage.setItem('data', JSON.stringify(lands.data))\n      localStorage.setItem('version', lands.version)\n    }\n  }, [])\n  const [userDeck, setUserDeck] = useState('')\n  const [randomLands, setRandomLands] = useState(\n    getRandomisedLands(landData, 'all')\n  )\n  const [modalOpen, setModalOpen] = useState(false)\n\n  const closeModal = () => {\n    setModalOpen(false)\n    Object.entries(randomLands).forEach(([rLandType, rLandData]) => {\n      const info = landData[rLandType].find(\n        dataLand => dataLand.name === rLandData.name\n      )\n\n      if (!info.selectable) {\n        getNewLands(rLandType)\n      }\n    })\n    localStorage.setItem('version', lands.version)\n    localStorage.setItem('data', JSON.stringify(landData))\n    document.body.classList.remove(styles.modalOpen)\n  }\n\n  const getNewLands = (land = 'all') => {\n    setRandomLands(getRandomisedLands(landData, land, randomLands))\n  }\n\n  const openModal = () => {\n    setModalOpen(true)\n    document.body.classList.add(styles.modalOpen)\n  }\n\n  return (\n    <Fragment>\n      <Modal isOpen={modalOpen}>\n        <LandFilter\n          landData={landData}\n          setLandData={setLandData}\n          closeModal={closeModal}\n        />\n      </Modal>\n      <div className={styles.app}>\n        <h1 className={styles.header}>Landcycler</h1>\n        <div className={styles.landIcons}>\n          <i className=\"ms ms-cost ms-w\" />\n          <i className=\"ms ms-cost ms-u\" />\n          <i className=\"ms ms-cost ms-b\" />\n          <i className=\"ms ms-cost ms-r\" />\n          <i className=\"ms ms-cost ms-g\" />\n        </div>\n        <DeckEntry\n          deck={userDeck}\n          newLands={randomLands}\n          updateDeck={setUserDeck}\n        />\n        <LandDisplay lands={randomLands} setRandomLands={getNewLands} />\n        <ModifierBar setRandomLands={getNewLands} openFilter={openModal} />\n      </div>\n      <Credits />\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}