{"version":3,"sources":["components/Footer/Footer.module.scss","components/LandFilter/LandFilter.module.scss","components/DeckEntry/DeckEntry.module.scss","App.module.scss","components/LandDisplay/LandDisplay.module.scss","components/Modal/Modal.module.scss","components/ModifierBar/ModifierBar.module.scss","images/settings.svg","utils/LandUtils.js","utils/Hooks.js","components/DeckEntry/DeckEntry.jsx","components/LandDisplay/LandDisplay.jsx","components/LandFilter/LandFilter.jsx","components/Modal/Modal.jsx","components/ModifierBar/ModifierBar.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","main","innerContainer","contact","credits","options","header","list","link","select","optionTitle","optionSection","maxLands","helperText","container","heading","land","removed","image","button","buttonContainer","input","plains","label","island","swamp","mountain","forest","tab","landCountLabel","deckSection","deckDisplay","deckContainer","title","arrow","app","modalOpen","landIcons","settings","modal","__webpack_require__","p","getRandomisedLands","landData","oldLands","arguments","length","undefined","Object","keys","reduce","newLands","landType","possibleLands","filter","selectable","deck","oldPos","newPos","Math","floor","random","temp","shuffleArray","transformLandsInDeck","lands","userLang","numberOfLands","split","map","card","splitCard","_splitCard","slicedToArray","count","name","values","languageData","find","val","getLandTypeFromLanguage","remainingLandCount","remainingArtCount","isNaN","min","landIndex","cardArray","newLand","cardName","concat","landCount","ceil","push","join","translateLandName","language","_data$find","entries","_ref","useLocalStorage","key","initialValue","_useState","useState","item","localStorage","getItem","JSON","parse","error","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","DeckEntry","numLands","newDeckRef","createRef","userDeck","setUserDeck","react_default","a","createElement","className","styles","onChange","e","target","spellCheck","readOnly","ref","onClick","current","LandDisplay","setRandomLands","_land","tLandName","displayName","src","imageUrl","alt","LandFilter","setLandData","closeModal","setTab","updateActiveTab","id","tabs","allTabs","activeLandCount","landName","react","cx","toLowerCase","type","checked","htmlFor","filteredLands","filteredLandName","defineProperty","foundLand","objectSpread","onLandClick","disabled","Modal","children","isOpen","createPortal","document","body","ModifierBar","openFilter","Footer","setUserLang","setNumLands","max","href","App","footerRef","_useLocalStorage","_useLocalStorage2","_useLocalStorage3","_useLocalStorage4","data","useEffect","savedVersion","savedData","version","_useState3","_useState4","randomLands","_useState5","_useState6","setModalOpen","getNewLands","Modal_Modal","LandFilter_LandFilter","classList","remove","window","scrollTo","top","offsetTop","behavior","gear","DeckEntry_DeckEntry","parseInt","LandDisplay_LandDisplay","ModifierBar_ModifierBar","add","Footer_Footer","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acae253a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Footer_main__3B_lJ\",\"innerContainer\":\"Footer_innerContainer__1lmfm\",\"contact\":\"Footer_contact__1WyII\",\"credits\":\"Footer_credits__1FZWf\",\"options\":\"Footer_options__3LUs4\",\"header\":\"Footer_header__QywmT\",\"list\":\"Footer_list__1oJAa\",\"link\":\"Footer_link__108CD\",\"select\":\"Footer_select__L7JNg\",\"optionTitle\":\"Footer_optionTitle__1AbRm\",\"optionSection\":\"Footer_optionSection__12ab2\",\"maxLands\":\"Footer_maxLands__1UNKW\",\"helperText\":\"Footer_helperText__2zz5w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandFilter_container__aTiQo\",\"heading\":\"LandFilter_heading__iRzfJ\",\"land\":\"LandFilter_land__1vdKd\",\"removed\":\"LandFilter_removed__3PV5-\",\"image\":\"LandFilter_image__o8TSf\",\"button\":\"LandFilter_button__11hDu\",\"buttonContainer\":\"LandFilter_buttonContainer__td_Y8\",\"input\":\"LandFilter_input__2sj5V\",\"plains\":\"LandFilter_plains__1-7_r\",\"label\":\"LandFilter_label__UNz49\",\"island\":\"LandFilter_island__31OyO\",\"swamp\":\"LandFilter_swamp__tXDu2\",\"mountain\":\"LandFilter_mountain__3kwKP\",\"forest\":\"LandFilter_forest__3jpjm\",\"tab\":\"LandFilter_tab__3M7KA\",\"landCountLabel\":\"LandFilter_landCountLabel__gBI_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deckSection\":\"DeckEntry_deckSection__11RcE\",\"deckDisplay\":\"DeckEntry_deckDisplay__2xB04\",\"deckContainer\":\"DeckEntry_deckContainer__3wsIT\",\"title\":\"DeckEntry_title__2Iz36\",\"arrow\":\"DeckEntry_arrow__1ydn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2h9bQ\",\"modalOpen\":\"App_modalOpen__3ccT6\",\"header\":\"App_header__tHlvO\",\"landIcons\":\"App_landIcons__2ntT4\",\"settings\":\"App_settings__2piAa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandDisplay_container__1YDom\",\"land\":\"LandDisplay_land__2W98F\",\"image\":\"LandDisplay_image__4UhiP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__10bc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ModifierBar_button__2YEuD\"};","module.exports = __webpack_public_path__ + \"static/media/settings.6acc27e6.svg\";","import languageData from '../data/languages.json'\n\nconst shuffleArray = deck => {\n  let oldPos = deck.length\n  while (oldPos) {\n    const newPos = Math.floor(Math.random() * oldPos--)\n    const temp = deck[oldPos]\n    deck[oldPos] = deck[newPos]\n    deck[newPos] = temp\n  }\n  return deck\n}\n\nexport const getRandomisedLands = (landData, land, oldLands = {}) => {\n  const landTypes = Object.keys(landData)\n  const randomisedLands = landTypes.reduce((newLands, landType) => {\n    const possibleLands = landData[landType].filter(land => land.selectable)\n    if (land === 'all' || land === landType) {\n      newLands[landType] = shuffleArray(possibleLands)\n    } else {\n      newLands[landType] = oldLands[landType]\n    }\n    return newLands\n  }, {})\n\n  return randomisedLands\n}\n\nexport const transformLandsInDeck = (\n  deck,\n  lands,\n  userLang = 'en',\n  numberOfLands\n) => {\n  const deckArray = deck.split('\\n')\n  const newDeckArray = deckArray.map(card => {\n    const splitCard = card.split(' ')\n    if (splitCard.length === 4) {\n      const [count, name] = splitCard\n      // First check if their card is in their language\n      const foundName = Object.values(languageData[userLang]).find(\n        val => val === name\n      )\n      if (foundName !== undefined) {\n        const landType = getLandTypeFromLanguage(name, userLang)\n        const newLands = lands[landType]\n        let remainingLandCount = count\n        let remainingArtCount =\n          !isNaN(numberOfLands) && numberOfLands > 0\n            ? Math.min(newLands.length, numberOfLands)\n            : newLands.length\n        let landIndex = 0\n        const cardArray = []\n        while (remainingLandCount > 0) {\n          const newLand = newLands[landIndex++]\n          const cardName = `${name} ${newLand.name}`\n          const landCount = Math.ceil(remainingLandCount / remainingArtCount)\n          remainingLandCount -= landCount\n          remainingArtCount--\n          cardArray.push(`${landCount} ${cardName}`)\n        }\n\n        return cardArray.join('\\n')\n      }\n    }\n\n    return card\n  })\n\n  return newDeckArray.join('\\n')\n}\n\nexport const translateLandName = (name, language = 'en') => {\n  return languageData[language][name]\n}\n\nexport const getLandTypeFromLanguage = (name, language = 'en') => {\n  const data = Object.entries(languageData[language])\n  const [enName] = data.find(([, translated]) => translated === name)\n  return enName\n}\n","import { useState } from 'react'\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = localStorage.getItem(key)\n\n      // If it's an object, we need to parse it first, else just return the item\n      if (item) {\n        return item instanceof Object ? JSON.parse(item) : item\n      }\n\n      return initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  const setValue = value => {\n    const valueToStore = value instanceof Function ? value(storedValue) : value\n    setStoredValue(valueToStore)\n    valueToStore instanceof Object\n      ? localStorage.setItem(key, JSON.stringify(valueToStore))\n      : localStorage.setItem(key, valueToStore)\n  }\n\n  return [storedValue, setValue]\n}\n","import React, { createRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { transformLandsInDeck } from '../../utils/LandUtils'\nimport styles from './DeckEntry.module.scss'\n\nexport const DeckEntry = ({ newLands, userLang, numLands }) => {\n  const newDeckRef = createRef()\n  const [userDeck, setUserDeck] = useState('')\n\n  return (\n    <div className={styles.deckSection}>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Imported Deck</span>\n        <textarea\n          className={styles.deckDisplay}\n          value={userDeck}\n          onChange={e => setUserDeck(e.target.value)}\n          spellCheck=\"false\"\n        />\n      </div>\n      <span className={styles.arrow}>➡</span>\n      <div className={styles.deckContainer}>\n        <span className={styles.title}>Export to MTG Arena</span>\n        <textarea\n          className={styles.deckDisplay}\n          readOnly\n          ref={newDeckRef}\n          value={transformLandsInDeck(userDeck, newLands, userLang, numLands)}\n          onClick={() => newDeckRef.current.select()}\n          spellCheck=\"false\"\n        />\n      </div>\n    </div>\n  )\n}\n\nDeckEntry.propTypes = {\n  newLands: PropTypes.shape().isRequired,\n  userLang: PropTypes.string.isRequired,\n  numLands: PropTypes.number.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { translateLandName } from '../../utils/LandUtils'\n\nimport styles from './LandDisplay.module.scss'\n\nexport const LandDisplay = ({ lands, setRandomLands, userLang }) => (\n  <div className={styles.container}>\n    {Object.entries(lands).map(land => {\n      const [landType, landArray] = land\n      // Only display the first of the shuffled array\n      const landData = landArray[0]\n      const tLandName = translateLandName(landType, userLang)\n      const displayName = `${tLandName} ${landData.name}`\n      return (\n        <div key={landType} className={styles.land}>\n          {displayName}\n          <img\n            className={styles.image}\n            src={landData.imageUrl}\n            alt={displayName}\n            onClick={() => setRandomLands(landType)}\n          />\n        </div>\n      )\n    })}\n  </div>\n)\n\nLandDisplay.propTypes = {\n  lands: PropTypes.shape().isRequired,\n  setRandomLands: PropTypes.func.isRequired,\n  userLang: PropTypes.string.isRequired,\n}\n","import React, { useState, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\n\nimport { translateLandName } from '../../utils/LandUtils'\n\nimport styles from './LandFilter.module.scss'\n\nexport const LandFilter = ({ landData, setLandData, closeModal, userLang }) => {\n  const [tab, setTab] = useState('Plains')\n  const updateActiveTab = e => setTab(e.target.id)\n\n  const allLands = Object.keys(landData)\n\n  const tabs = allLands.reduce((allTabs, land) => {\n    const data = landData[land]\n    const activeLandCount = data.filter(land => land.selectable).length\n    const landName = translateLandName(land, userLang)\n\n    allTabs.push(\n      <Fragment key={`filter_${land}`}>\n        <input\n          className={cx(styles.input, styles[land.toLowerCase()])}\n          id={land}\n          type=\"radio\"\n          checked={tab === land}\n          onChange={updateActiveTab}\n        />\n        <label className={styles.label} htmlFor={land}>\n          <span>{landName}</span>\n          <span className={styles.landCountLabel}>({activeLandCount})</span>\n        </label>\n      </Fragment>\n    )\n    return allTabs\n  }, [])\n\n  const filteredLands = landData[tab]\n  const activeLandCount = filteredLands.filter(land => land.selectable).length\n  const filteredLandName = translateLandName(tab, userLang)\n\n  const onLandClick = name => {\n    const foundLand = filteredLands.find(land => land.name === name)\n    // Don't allow them to go below 1 active land\n    if (activeLandCount === 1 && foundLand.selectable) {\n      return\n    }\n\n    foundLand.selectable = !foundLand.selectable\n    setLandData({\n      ...landData,\n      [tab]: filteredLands,\n    })\n  }\n\n  return (\n    <div>\n      <div className={styles.tab}>{tabs}</div>\n      <div className={styles.container}>\n        {filteredLands.map(land => {\n          const displayName = `${filteredLandName} ${land.name}`\n          return (\n            <div\n              key={land.name}\n              className={cx(styles.land, {\n                [styles.removed]: !land.selectable,\n              })}\n              onClick={() => onLandClick(land.name)}\n            >\n              {displayName}\n              <img\n                className={styles.image}\n                src={land.imageUrl}\n                alt={displayName}\n              />\n            </div>\n          )\n        })}\n      </div>\n      <div className={styles.buttonContainer}>\n        <button\n          className=\"main-button\"\n          disabled={activeLandCount < 1}\n          onClick={closeModal}\n        >\n          Save Filters\n        </button>\n      </div>\n    </div>\n  )\n}\n\nLandFilter.propTypes = {\n  landData: PropTypes.shape().isRequired,\n  setLandData: PropTypes.func.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  userLang: PropTypes.string.isRequired,\n}\n","import React from 'react'\nimport { createPortal } from 'react-dom'\n\nimport styles from './Modal.module.scss'\n\nexport const Modal = ({ children, isOpen }) =>\n  isOpen\n    ? createPortal(\n        <div className={styles.modal}>{children}</div>,\n        document.body\n      )\n    : null\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './ModifierBar.module.scss'\n\nexport const ModifierBar = ({ openFilter, setRandomLands }) => (\n  <div className={styles.button}>\n    <button className=\"main-button\" onClick={openFilter}>\n      Filter\n    </button>\n\n    <button className=\"main-button\" onClick={() => setRandomLands()}>\n      Randomise All\n    </button>\n  </div>\n)\n\nModifierBar.propTypes = {\n  setRandomLands: PropTypes.func.isRequired,\n  openFilter: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './Footer.module.scss'\n\nexport const Footer = ({ userLang, setUserLang, numLands, setNumLands }) => (\n  <div className={styles.main}>\n    <div className={styles.innerContainer}>\n      <div className={styles.options}>\n        <h5 className={styles.header}>Options</h5>\n        <div className={styles.optionSection}>\n          <span className={styles.optionTitle}>Language</span>\n          <select\n            className={styles.select}\n            value={userLang}\n            onChange={e => setUserLang(e.target.value)}\n          >\n            <option value=\"en\">English</option>\n            <option value=\"es\">Spanish</option>\n            <option value=\"fr\">French</option>\n            <option value=\"de\">German</option>\n            <option value=\"it\">Italian</option>\n            <option value=\"pt\">Portuguese</option>\n            <option value=\"ja\">Japanese</option>\n            <option value=\"ru\">Russian</option>\n          </select>\n        </div>\n        <div>\n          <span className={styles.optionTitle}>Convert to</span>\n          <input\n            className={styles.maxLands}\n            value={numLands}\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            onChange={e => setNumLands(e.target.value)}\n          />\n          <span className={styles.optionTitle}> different land art(s)</span>\n          <div className={styles.helperText}>\n            {`This setting will attempt to convert one land to X land arts.`}\n            <br />\n            {`0 = As many land arts as possible, 1 = one land art (default), 2 = two land arts etc.`}\n          </div>\n        </div>\n      </div>\n      <div className={styles.credits}>\n        <h5 className={styles.header}>Credits</h5>\n        <ul className={styles.list}>\n          <li>Landcycler created by Sylencia</li>\n          <li>\n            {'Land images provided by '}\n            <a className={styles.link} href=\"https://scryfall.com/\">\n              Scryfall\n            </a>\n          </li>\n          <li>\n            {'Mana icons provided by '}\n            <a\n              className={styles.link}\n              href=\"https://andrewgioia.github.io/Mana/\"\n            >\n              Andrew Gioia\n            </a>\n          </li>\n        </ul>\n      </div>\n      <div className={styles.contact}>\n        <h5 className={styles.header}>Contact me</h5>\n        <ul className={styles.list}>\n          <li>\n            <a className={styles.link} href=\"https://www.reddit.com/u/Sylencia\">\n              Reddit\n            </a>\n          </li>\n          <li>\n            <a className={styles.link} href=\"https://github.com/Sylencia\">\n              Github\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n)\n\nFooter.propTypes = {\n  userLang: PropTypes.string.isRequired,\n  setUserLang: PropTypes.func.isRequired,\n  numLands: PropTypes.string.isRequired,\n  setNumLands: PropTypes.func.isRequired,\n}\n","import React, { useState, useEffect, Fragment, createRef } from 'react'\nimport { getRandomisedLands } from './utils/LandUtils'\nimport { useLocalStorage } from './utils/Hooks'\nimport { DeckEntry } from './components/DeckEntry'\nimport { LandDisplay } from './components/LandDisplay'\nimport { LandFilter } from './components/LandFilter'\nimport { Modal } from './components/Modal'\nimport { ModifierBar } from './components/ModifierBar'\nimport { Footer } from './components/Footer'\nimport lands from './data/lands.json'\nimport gear from './images/settings.svg'\nimport styles from './App.module.scss'\nimport './stylesheets/global.module.scss'\n\nconst App = () => {\n  const footerRef = createRef()\n  const [numLands, setNumLands] = useLocalStorage('numLands', '1')\n  const [userLang, setUserLang] = useLocalStorage('language', 'en')\n\n  const [landData, setLandData] = useState(lands.data)\n  useEffect(() => {\n    const savedVersion = localStorage.getItem('version') || 0\n    const savedData = localStorage.getItem('data')\n    if (lands.version <= savedVersion && savedData) {\n      setLandData(JSON.parse(savedData))\n    } else {\n      localStorage.setItem('data', JSON.stringify(lands.data))\n      localStorage.setItem('version', lands.version)\n    }\n  }, [])\n\n  const [randomLands, setRandomLands] = useState({})\n  useEffect(() => {\n    const savedVersion = localStorage.getItem('version') || 0\n    const savedData = localStorage.getItem('data')\n    if (lands.version <= savedVersion && savedData) {\n      setRandomLands(getRandomisedLands(JSON.parse(savedData), 'all'))\n    } else {\n      setRandomLands(getRandomisedLands(landData, 'all'))\n    }\n  }, [])\n  const [modalOpen, setModalOpen] = useState(false)\n\n  const closeModal = () => {\n    setModalOpen(false)\n    getNewLands('all')\n    localStorage.setItem('version', lands.version)\n    localStorage.setItem('data', JSON.stringify(landData))\n    document.body.classList.remove(styles.modalOpen)\n  }\n\n  const getNewLands = (land = 'all') => {\n    setRandomLands(getRandomisedLands(landData, land, randomLands))\n  }\n\n  const openModal = () => {\n    setModalOpen(true)\n    document.body.classList.add(styles.modalOpen)\n  }\n\n  const scrollToFooter = () => {\n    window.scrollTo({\n      top: footerRef.current.offsetTop,\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Fragment>\n      <Modal isOpen={modalOpen}>\n        <LandFilter\n          landData={landData}\n          setLandData={setLandData}\n          closeModal={closeModal}\n          userLang={userLang}\n        />\n      </Modal>\n      <div className={styles.app}>\n        <h1 className={styles.header}>Landcycler</h1>\n        <button className={styles.settings} onClick={scrollToFooter}>\n          <img src={gear} alt=\"Settings\" />\n        </button>\n        <div className={styles.landIcons}>\n          <i className=\"ms ms-cost ms-w\" />\n          <i className=\"ms ms-cost ms-u\" />\n          <i className=\"ms ms-cost ms-b\" />\n          <i className=\"ms ms-cost ms-r\" />\n          <i className=\"ms ms-cost ms-g\" />\n        </div>\n        <DeckEntry\n          newLands={randomLands}\n          userLang={userLang}\n          numLands={parseInt(numLands)}\n        />\n        <LandDisplay\n          lands={randomLands}\n          setRandomLands={getNewLands}\n          userLang={userLang}\n        />\n        <ModifierBar setRandomLands={getNewLands} openFilter={openModal} />\n      </div>\n      <div ref={footerRef}>\n        <Footer\n          userLang={userLang}\n          setUserLang={setUserLang}\n          numLands={numLands}\n          setNumLands={setNumLands}\n        />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}